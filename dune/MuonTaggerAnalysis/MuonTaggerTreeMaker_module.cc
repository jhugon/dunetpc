////////////////////////////////////////////////////////////////////////
// Class:       MuonTaggerTreeMaker
// Module Type: analyzer
// File:        MuonTaggerTreeMaker_module.cc
//
// Generated at Tue Jun 28 16:02:09 2016 by JustinHugon using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <iostream>

#include "SimulationBase/MCParticle.h"
#include "larcore/Geometry/Geometry.h"

#include "TH1D.h"
#include "TH2D.h"
#include "TFile.h"
#include "TTree.h"
#include "TDatabasePDG.h"

namespace dune {
  class MuonTaggerTreeMaker;
}

class dune::MuonTaggerTreeMaker : public art::EDAnalyzer {
public:
  explicit MuonTaggerTreeMaker(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  MuonTaggerTreeMaker(MuonTaggerTreeMaker const &) = delete;
  MuonTaggerTreeMaker(MuonTaggerTreeMaker &&) = delete;
  MuonTaggerTreeMaker & operator = (MuonTaggerTreeMaker const &) = delete;
  MuonTaggerTreeMaker & operator = (MuonTaggerTreeMaker &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;


private:

  // Declare member data here.

};


dune::MuonTaggerTreeMaker::MuonTaggerTreeMaker(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{

}

void dune::MuonTaggerTreeMaker::analyze(art::Event const & e)
{
  // Implementation of required member function here.

  //Get needed data products
  std::string fTruePartLabel = "largeant";
  art::Handle<std::vector<simb::MCParticle>> truePartHand;
  e.getByLabel(fTruePartLabel, truePartHand);
  std::vector<art::Ptr<simb::MCParticle>> truePartVec;
  if(truePartHand.isValid())
  {
    art::fill_ptr_vector(truePartVec, truePartHand);
  }
  for (const auto& truePart : truePartVec)
  {
    double trueStartMom = truePart->Momentum().Mag()*1000.; //in MeV/c
    double trueStartTheta = truePart->Momentum().Vect().Theta()*180./M_PI; //in degrees
    double trueStartPhi = truePart->Momentum().Vect().Phi()*180./M_PI; //in degrees
    std::cout << truePart->PdgCode() << " momentum [MeV]: " << trueStartMom << " Theta [deg]: "<< trueStartTheta << " Phi [deg]: "<< trueStartPhi  << "  ";
    std::cout << " X,Y,Z: " <<truePart->Position().X() <<", "<<truePart->Position().Y()<<", "<<truePart->Position().Z()<<", "<< std::endl;
  }
  
}

DEFINE_ART_MODULE(dune::MuonTaggerTreeMaker)
